syntax = "proto3";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "github.com/deweing/protoc-gen-openapiv3/swagger/annotations.proto";
import "common.proto";

option go_package="github.com/deweing/store-srv/proto/store-srv";
option (gogoproto.goproto_enum_prefix_all) = false;
option (gogoproto.goproto_getters_all) = false;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.goproto_stringer_all) = false;
option (gogoproto.stringer_all) =  true;

package store_scene_srv;

// 门店
service Store {
  option (swagger.tag) = {description: "门店", sort:1};

  // 创建门店
  rpc Create(StoreCreateReq) returns (StoreCreateRsp) {
    option (google.api.http) = {
      post: "/v1/Store/Create",
      body: "*"
    };
  }

  // 获取门店
  rpc Get(StoreIdReq) returns (StoreGetRsp) {
    option (google.api.http) = {
      get: "/v1/Store/Get"
    };
  }
  // 更新门店
  rpc Update(StoreUpdateReq) returns (ResultRsp) {
    option (google.api.http) = {
      post: "/v1/Store/Update",
      body: "*"
    };
  }
  // 删除门店
  rpc Delete(StoreIdReq) returns (ResultRsp) {
    option (google.api.http) = {
      delete: "/v1/Store/Delete",
    };

    option (swagger.operation)={deprecated: true};
  }
  // 门店列表
  rpc List(StoreListReq) returns (StoreListRsp) {
    option (google.api.http) = {
      post: "/v1/Store/List",
      body: "*"
    };
  }
  // 统计数量
  rpc Count(StoreCountReq) returns (StoreCountRsp) {
    option (google.api.http) = {
      post: "/v1/Store/Count"
    };
  }
}

// 门店类型
enum StoreType {
  // 未知、全部
  STORE_TYPE_UNKNOWN = 0;
  // 直营店
  STORE_TYPE_DIRECT  = 1;
  // 加盟店
  STORE_TYPE_FRANCHISE = 2;
}

// 门店状态
enum StoreStatus {
  //未知、全部
  STORE_STATUS_UNKNOWN = 0;
  //启用
  STORE_STATUS_ENABLE = 1;
  //停用
  STORE_STATUS_DISABLE = 2;
}

// 门店来源
enum StoreSource {
  //未知、全部
  STORE_SOURCE_UNKNOWN = 0;
  //新建
  STORE_SOURCE_CREATE = 1;
  //内部
  STORE_SOURCE_INNER = 2;
}

message StoreCreateReq {
  option (swagger.schema) = {
    json_schema: {
      description: "创建门店",
      required: ["appId", "accountId", "storeName"]
    }
  };

  // @govalidator required~产品ID必须
  uint32 appId = 1 [(swagger.field) = {description: "产品ID2", example: "1"}];
  uint64 accountId = 2 [(swagger.field) = {description: "主账号ID", type: STRING, example: "\"100010\""}];
  string storeName = 3 [(swagger.field) = {description: "门店名称", example: "\"青羊全家超市\""}];
  StoreType storeType = 4;
  uint32 areaCode = 5 [(swagger.field) = {description: "地区代码", example:"501010"}];
  string address = 6 [(swagger.field) = {description: "详细地址", example: "\"春熙路银石广场108楼\""}];
  string storePhone = 7 [(swagger.field) = {description: "门店联系电话", example: "\"18800008888\""}];
  string contactName = 8 [(swagger.field) = {description: "联系人", example: "\"李元芳\""}];
  string contactPhone = 9 [(swagger.field) = {description: "联系人电话", example: "\"18800008888\""}];
  string comment = 10 [(swagger.field) = {description: "备注", example: "\"备注\""}];
  StoreStatus status = 11;
  StoreSource source = 12;
  int64 sourceId = 13 [(swagger.field) = {description: "来源账号ID", example: "123456"}];
}

message StoreCreateRsp {
  int64 code = 1 [(gogoproto.jsontag) = "code", (gogoproto.nullable) = true, (swagger.field) = {description: "返回代码:200正常,其他错误", example: "200"}];
  string detail = 2 [(gogoproto.jsontag) = "detail", (gogoproto.nullable) = true, (swagger.field) = {description: "错误信息"}];
  Data data = 3 [(gogoproto.jsontag) = "data", (gogoproto.nullable) = true, (swagger.field) = {description: "返回数据"}];

  message Data {
    uint64 storeId = 1 [(gogoproto.jsontag) = "storeId", (gogoproto.nullable) = true, (swagger.field) = {description: "门店ID", example: "100010"}];
  }
}

message StoreIdReq {
  option (swagger.schema) = {
    json_schema: {
      description: "门店ID",
      required: ["appId", "accountId", "storeId"]
    }
  };

  uint32 appId = 1 [(swagger.field) = {description: "产品ID",  example: "1"}];
  uint64 accountId = 2 [(swagger.field) = {description: "主账号ID",example: "100010"}];
  uint64 storeId = 3 [(swagger.field) = {description: "门店ID", example: "910011"}];
}

message StoreGetRsp {
  int64 code = 1 [(gogoproto.jsontag) = "code", (gogoproto.nullable) = true, (swagger.field) = {description: "返回代码:200正常,其他错误", example: "200"}];
  string detail = 2 [(gogoproto.jsontag) = "detail", (gogoproto.nullable) = true, (swagger.field) = {description: "错误信息"}];
  StoreEntity data = 3 [(gogoproto.jsontag) = "data", (gogoproto.nullable) = true];
}

message StoreEntity {
  uint64 storeId = 1 [(gogoproto.jsontag) = "storeId", (gogoproto.nullable) = true, (swagger.field) = {description: "门店ID", example: "910011"}];
  uint32 appId = 2 [(gogoproto.jsontag) = "appId", (gogoproto.nullable) = true, (swagger.field) = {description: "产品ID", example: "1"}];
  uint64 accountId = 3 [(gogoproto.jsontag) = "accountId", (gogoproto.nullable) = true, (swagger.field) = {description: "主账号ID", example: "100010"}];
  string storeName = 4 [(gogoproto.jsontag) = "storeName", (gogoproto.nullable) = true, (swagger.field) = {description: "门店名称", example: "\"青羊全家超市\""}];
  string storeCode = 5 [(gogoproto.jsontag) = "storeCode", (gogoproto.nullable) = true, (swagger.field) = {description: "门店编码", example: "\"10086001\""}];
  StoreType storeType = 6 [(gogoproto.jsontag) = "storeType", (gogoproto.nullable) = true];
  uint32 areaCode = 7 [(gogoproto.jsontag) = "areaCode", (gogoproto.nullable) = true, (swagger.field) = {description: "地区代码", example:"501010"}];
  string address = 8 [(gogoproto.jsontag) = "address", (gogoproto.nullable) = true, (swagger.field) = {description: "详细地址", example: "\"春熙路银石广场108楼\""}];
  string storePhone = 9 [(gogoproto.jsontag) = "storePhone", (gogoproto.nullable) = true, (swagger.field) = {description: "门店联系电话", example: "\"18800008888\""}];
  string contactName = 10 [(gogoproto.jsontag) = "contactName", (gogoproto.nullable) = true, (swagger.field) = {description: "联系人", example: "\"李元芳\""}];
  string contactPhone = 11 [(gogoproto.jsontag) = "contactPhone", (gogoproto.nullable) = true, (swagger.field) = {description: "联系人电话", example: "\"18800008888\""}];
  string comment = 12 [(gogoproto.jsontag) = "comment", (gogoproto.nullable) = true, (swagger.field) = {description: "备注", example: "\"备注\""}];
  StoreStatus status = 13 [(gogoproto.jsontag) = "status", (gogoproto.nullable) = true];
  StoreSource source = 14 [(gogoproto.jsontag) = "source", (gogoproto.nullable) = true];
  int64 sourceId = 15 [(gogoproto.jsontag) = "sourceId", (gogoproto.nullable) = true, (swagger.field) = {description: "来源账号ID", example: "123456"}];
}

message StoreUpdateReq {
  option (swagger.schema) = {
    json_schema: {
      description: "编辑门店",
    }
  };

  uint64 storeId = 1 [(swagger.field) = {description: "门店ID", example: "910011", required:["storeId"]}];
  uint32 appId = 2  [(swagger.field) = {description: "产品ID", example: "1", required:["appId"]}];
  uint64 accountId = 3 [(swagger.field) = {description: "主账号ID", example: "100010", required:["accountId"]}];
  string storeName = 4 [(swagger.field) = {description: "门店名称", example: "\"青羊全家超市\"", required:["storeName"]}];
  StoreType storeType = 5;
  uint32 areaCode = 6 [(swagger.field) = {description: "地区代码", example:"501010"}];
  string address = 7 [(swagger.field) = {description: "详细地址", example: "\"春熙路银石广场108楼\""}];
  string storePhone = 8 [(swagger.field) = {description: "门店联系电话", example: "\"18800008888\""}];
  string contactName = 9  [(swagger.field) = {description: "联系人", example: "\"李元芳\""}];
  string contactPhone = 10 [(swagger.field) = {description: "联系人电话", example: "\"18800008888\""}];
  string comment = 11 [(swagger.field) = {description: "备注", example: "\"备注\""}];
  StoreStatus status = 12;
}

message StoreListReq {
  option (swagger.schema) = {
    json_schema: {
      description: "门店列表",
      required: ["appId", "accountId"]
    }
  };

  uint32 appId = 1  [(swagger.field) = {description: "产品ID", example: "1"}];
  uint64 accountId = 2 [(swagger.field) = {description: "主账号ID", example: "100010"}];
  string storeName = 3 [(swagger.field) = {description: "门店名称", example: "\"青羊全家超市\""}];
  uint32 areaCode = 4 [(swagger.field) = {description: "地区代码", example:"501010"}];
  // 门店状态
  StoreStatus status = 5;
  // 门店类型
  StoreType storeType = 6;
  uint32 page = 7 [(swagger.field) = {description: "当前页", example:"2", default: "1"}];
  uint32 limit = 8 [(swagger.field) = {description: "返回条数", example:"100", default: "20"}];
}

message StoreListRsp {
  int64 code = 1 [(gogoproto.jsontag) = "code", (gogoproto.nullable) = true, (swagger.field) = {description: "返回代码:200正常,其他错误", example: "200"}];
  string detail = 2 [(gogoproto.jsontag) = "detail", (gogoproto.nullable) = true, (swagger.field) = {description: "错误信息"}];
  // 返回数据
  Data data = 3 [(gogoproto.jsontag) = "data", (gogoproto.nullable) = true];

  message Data {
    // 门店
    repeated StoreEntity stores = 1 [(gogoproto.jsontag) = "stores", (gogoproto.nullable) = true,  (swagger.field) = {description: "门店"}];
  }
}

message StoreCountReq {
  option (swagger.schema) = {
    json_schema: {
      description: "门店列表",
      required: ["appId", "accountId"]
    }
  };

  uint32 appId = 1  [(swagger.field) = {description: "产品ID", example: "1"}];
  uint64 accountId = 2 [(swagger.field) = {description: "主账号ID", example: "100010"}];
  string storeName = 3 [(swagger.field) = {description: "门店名称", example: "\"青羊全家超市\""}];
  uint32 areaCode = 4 [(swagger.field) = {description: "地区代码", example:"501010"}];
  // 门店状态
  StoreStatus status = 5;
  // 门店类型
  StoreType storeType = 6;
}

message StoreCountRsp {
  int64 code = 1 [(gogoproto.jsontag) = "code", (gogoproto.nullable) = true, (swagger.field) = {description: "返回代码:200正常,其他错误", example: "200"}];
  string detail = 2 [(gogoproto.jsontag) = "detail", (gogoproto.nullable) = true, (swagger.field) = {description: "错误信息"}];
  // 返回数据
  Data data = 3 [(gogoproto.jsontag) = "data", (gogoproto.nullable) = true];

  message Data {
    uint32 total = 1 [(gogoproto.jsontag) = "total", (gogoproto.nullable) = true, (swagger.field) = {description: "总数", example: "100", default: "0"}];
  }
}